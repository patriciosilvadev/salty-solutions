service:
  name: fishing-app

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 500
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTimeToLive
        - dynamodb:BatchWriteItem
      Resource: ${cf:ss-database-${self:provider.stage}.MainTableArn}
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:DeleteMessage
        - sqs:SetQueueAttributes
        - sqs:GetQueueAttributes
        - sqs:ReceiveMessage
      Resource:
        - ${cf:ss-queue-${self:provider.stage}.ForecastPreloaderQueueArn}
        - ${cf:ss-queue-${self:provider.stage}.TidePreloaderQueueArn}
        - ${cf:ss-queue-${self:provider.stage}.WindFinderPreloaderQueueArn}
    - Effect: Allow
      Action:
        - s3:*
      Resource: arn:aws:s3:::salty-solutions-assets/*
  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    ROLLBAR_KEY: ${env:ROLLBAR_KEY}
    DATABASE_TABLE_NAME: ${cf:ss-database-${self:provider.stage}.MainTableName}

functions:
  graphql:
    handler: ./src/server.graphql
    layers:
      - arn:aws:lambda:us-east-1:764866452798:layer:ghostscript:8
    timeout: 20
    events:
      - http:
          cors: true
          method: any
          path: api
  preload-forecast-producer:
    handler: src/preloaders/producers.forecast
    events:
      - schedule:
          name: ForecastPreloader-${self:provider.stage}
          enabled: ${self:custom.schedule_enabled.${self:provider.stage}, false}
          rate: rate(3 hours)
    environment:
      QUEUE_URL: ${cf:ss-queue-${self:provider.stage}.ForecastPreloaderQueueUrl}
  preload-forecast-consumer:
    handler: src/preloaders/consumers.forecast
    timeout: 120
    events:
      - sqs:
          batchSize: 1
          arn: ${cf:ss-queue-${self:provider.stage}.ForecastPreloaderQueueArn}

  preload-windfinder-producer:
    handler: src/preloaders/producers.windFinder
    events:
      - schedule:
          name: WindFinderPreloader-${self:provider.stage}
          enabled: ${self:custom.schedule_enabled.${self:provider.stage}, false}
          rate: rate(3 hours)
    environment:
      QUEUE_URL: ${cf:ss-queue-${self:provider.stage}.WindFinderPreloaderQueueUrl}
  preload-windfinder-consumer:
    handler: src/preloaders/consumers.windFinder
    timeout: 120
    events:
      - sqs:
          batchSize: 1
          arn: ${cf:ss-queue-${self:provider.stage}.WindFinderPreloaderQueueArn}

  # todo re-enable this if we can get past dynamodb limits
  # preload-tide-producer:
  #   handler: src/preloaders/producers.tide
  #   events:
  #     - schedule:
  #         name: TidePreloader-${self:provider.stage}
  #         enabled: ${self:custom.schedule_enabled.${self:provider.stage}, false}
  #         rate: cron(5 6 * * ? *) # 6:05 UTC = 1:05 CST
  #   environment:
  #     QUEUE_URL: ${cf:ss-queue-${self:provider.stage}.TidePreloaderQueueUrl}
  # preload-tide-consumer:
  #   handler: src/preloaders/consumers.tide
  #   timeout: 120
  #   events:
  #     - sqs:
  #         batchSize: 1
  #         arn: ${cf:ss-queue-${self:provider.stage}.TidePreloaderQueueArn}

custom:
  serverless-offline:
    port: 4000
  schedule_enabled:
    prod: true
    dev: false
