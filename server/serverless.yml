service:
  name: fishing-app

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 500
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTimeToLive
      Resource: ${cf:ss-database-${self:provider.stage}.MainTableArn}
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:DeleteMessage
        - sqs:SetQueueAttributes
        - sqs:GetQueueAttributes
        - sqs:ReceiveMessage
      Resource:
        Fn::GetAtt: [ForecastPreloaderQueue, Arn]
  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    ROLLBAR_KEY: ${env:ROLLBAR_KEY}
    DATABASE_TABLE_NAME: ${cf:ss-database-${self:provider.stage}.MainTableName}

functions:
  graphql:
    handler: ./src/server.graphql
    timeout: 10
    events:
      - http:
          cors: true
          method: any
          path: api

  preload-forecast-producer:
    handler: src/preloaders/producers.forecast
    events:
      - schedule:
          name: ForecastPreloader-${self:provider.stage}
          enabled: ${self:custom.schedule_enabled.${self:provider.stage}, false}
          rate: rate(3 hours)
    environment:
      QUEUE_URL:
        Ref: ForecastPreloaderQueue
  preload-forecast-consumer:
    handler: src/preloaders/consumers.forecast
    timeout: 120
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - ForecastPreloaderQueue
              - Arn

resources:
  - ${file(./sqs.yml)}

custom:
  serverless-offline:
    port: 4000
  schedule_enabled:
    prod: true
    dev: false
