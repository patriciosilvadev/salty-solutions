service:
  name: fishing-app

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 500
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTimeToLive
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
        - sqs:DeleteMessage
        - sqs:SetQueueAttributes
        - sqs:GetQueueAttributes
        - sqs:ReceiveMessage
      Resource: "arn:aws:sqs:us-east-1:*:*"
  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    ROLLBAR_KEY: ${env:ROLLBAR_KEY}

functions:
  graphql:
    handler: ./src/server.graphql
    timeout: 10
    events:
      - http:
          cors: true
          method: any
          path: api

  preload-forecast-producer:
    handler: src/preloaders/producers.forecast
    events:
      - schedule:
          name: ForecastPreloader-${self:provider.stage}
          # enabled: ${self:custom.schedule_enabled.${self:provider.stage}, false}
          enabled: true
          rate: rate(2 minutes)
    environment:
      QUEUE_URL:
        Ref: ForecastPreloaderQueue
  preload-forecast-consumer:
    handler: src/preloaders/consumers.forecast
    timeout: 120
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - ForecastPreloaderQueue
              - Arn

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: salty-solutions-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: N
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    ForecastPreloaderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: forecast-preloader-${self:provider.stage}
        VisibilityTimeout: 120

custom:
  serverless-offline:
    port: 4000
  schedule_enabled:
    prod: true
    dev: false
